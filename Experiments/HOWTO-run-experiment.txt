Running Parameter Sweeps in the EXOSIMS Sandbox
Michael Turmon
December 2018, September 2020, July 2022

This is how I currently run parameter sweeps in the Sandbox. 

For more on the "generate derived scripts" step, see the notes on how
json-xform.py works, currently named "script-expander-2018-11-28.pdf".


Overview
======

The basic flow is as follows.

[A] Preparation.
  * Start with a "template script" that invokes Exosims correctly
  * Produce a family of "derived scripts" from the template using json-xform.py
  * Check that one of the derived scripts works for a single Exosims run

[B] Run.
  * Optionally, partition the list of derived scripts (json files) into 3
  sets, one each for aftac1/2/3, each stored in a per-machine file.
  * Run simulations on each machine.

[C] Analysis.
  * Reduce the data, for all of the derived scripts, to get yields.
  * Make plots and path ensembles for *some* of the derived scripts, to get
  pointwise insight.


Step-by-step
=========

The coarse-level steps here match the ones above.

[A] Preparation.

* Start with a working script as a base, say, Scripts/Habex_works_20181120.json

* Create a Script directory for the Experiment -- the name is arbitrary, but
  end in ".exp".  Create a book-keeping subdirectory, Sources/, and put
  the base script there for traceability. Add a README in Sources/ if you wish.

mkdir Scripts/Habex_works_20181201.exp  
mkdir Scripts/Habex_works_20181201.exp/Sources
cp  Scripts/Habex_works_20181120.json Scripts/Habex_works_20181201.exp/Sources/base.json

* Create a transform script, in JSON, that iterates over the right parameters, and
  (for traceability) place it in:
  Scripts/Habex_works_20181201.exp/Sources/xform-v1.json
  Some example scripts are also in the Experiments/ subdirectory.

* Make the set of derived scripts from the template script using the
following transform idiom:

util/json-xform.py -o Scripts/Habex_works_20181201.exp/s_%s.json Scripts/Habex_works_20181201.exp/Sources/base.json Experiments/xform-v1.json

Note: xform-v1.json is the script you wrote to iterates over the LJS
coefficients. You will need to use a generator script that sweeps out
the right set of final Exosims parameters for your purpose.

* Do a single test run to set up cache files and ensure everything works.
  This command selects one script in the experiment and runs it with one seed,
  cleaning up after itself.

make S=Habex_works_20181201.exp exp-preflight

* Use the execution time of this run to extrapolate a first-cut on how
long processing will take.  Evaluate if this time is acceptable. 


[B] Run.

* Generate a master shell script for the run.  This complex-looking line
  just makes one "add-sims.sh" line for each generated Exosims script

ls Scripts/HabEx_works_20181201.exp/s_c*.json | sed -e 's/^/add-sims.sh -A /' -e 's|$| Experiments/seed100.txt|'  > Run-script.cmds

* Run the generated script.  Jobs are automatically farmed out
  across machines by "add-sims.sh -A".

sh < Run-script.cmds 

-or-

nohup nice sh < Run-script.cmds 

If nohup is used, output will go in "nohup.out" instead of to screen.
If nice is used, everything in the job is niced.


[C] Analysis.

* Reduce all the data.  This is fast and should finish within a few
  seconds.  Note the use of the *experiment* as the S variable in
  'make exp-reduce'.  This will iterate over all the scripts in the Experiment.

make S=Habex_works_20181201.exp exp-reduce

* Make the summary webpage.  Again, the *experiment* is the S variable.
  `make html-only' is just compiling yields and other basic information
  output by reduction, but does *not* make plots.

make S=Habex_works_20181201.exp exp-html-only

* To get deeper insight, make plots and diagnostics for a few specific
ensembles.  This selects the top 10 (by yield) and another 20 (at random)
ensembles, and makes all the plots.  It takes a while.  You can add "-j2"
to the make to run in parallel (the limit being the number of Matlab
instances you want to have running).

make S=Habex_works_20181201.exp exp-html

* The other familiar targets also have exp versions as follows.
  -- make 5 movies, each, within selected ensembles (exp-path-movie)
  -- make 5 observation timelines, each, within selected ensembles (exp-obs-timeline)
  -- make 5 keepout maps, each, within seleccted ensembles (exp-keepout)
  -- make the ensemble path/tour graphic for selected ensembles (exp-path-ensemble)

* As a back door, which works but is tedious, you can also make all the
familiar single-ensemble plots and diagnostics, by making S point to the
script within the Experiment.

make S=Habex_works_20181201.exp/s_c1=0.76_c2=0.10_c3=0.05 html
make S=Habex_works_20181201.exp/s_c1=0.50_c2=0.20_c3=0.10 html
[...more as needed...]

Similarly for other ensemble targets, like path-ensemble and path-movie-5.
