#!/usr/bin/env python
r'''
export-ensemble-files.py: export selected files (plots, csv) from an ensemble

usage:
  export-ensemble-files.py [ -p ] [ -o ] SIMDIR

where:
  SIMDIR is a simulation directory, typically, sims/FOO
and:
  -o outfile gives an output subdirectory
  -p means plain text output versus the default markdown

Typical usage:
  util/export-ensemble-files.py sims/HabEx_4m_foo

turmon oct 2019
'''

from __future__ import division
import argparse
import sys
import os
import glob
import re
import shutil
import subprocess
from datetime import datetime
from collections import namedtuple

Export = namedtuple('Export', ['family', 'file', 'info'])

########################################
###
###  Tabular-ized file export list
###
########################################

EXPORTS = [
    # images
    Export('*',   'gfx/det-earth-char-count-all.png',      'Histogram of earths characterized'),  # single line,Full
    Export('*',   'path/{seed}-final.png',             'Final frame'),
    Export('*',   'path/{seed}-obs-timeline.png',      'Observation timeline'),
    Export('*',   'path/{seed}-obs-keepout-char.png',  'Keepout for chars (remove if too big)'),
    Export('*',   'gfx/det-event-count-det.png',  'Event count, dets and chars'),
    Export('*',   'gfx/det-obstime-cume.png',     'Cumulative mission obs'),
    Export('*',   'gfx/det-time-char-earth-part-cume.png', 'Cumulative Earth chars'),
    Export('*',   'gfx/det-time-det-earth-cume.png',       'Cumulative det earths'),
    Export('*',   'gfx/det-radlum-char-snr-union.png',     'SNR demographic'),
    #Export('*',   'gfx/det-rad-sma-char-tput-strict.png', 'Kopparapu Throughput'),
    Export('*',   'gfx/det-duration-slew-b0.png', 'Mean slew time histogram (60 days)'),
    Export('*',   'gfx/det-fuel.png',             'Cumulative fuel use'),
    # per-run files
    # (removed from export: this plot seems to have issues in some scenarios, so we will
    # use an earlier plot)
    #Export('h4h', 'path/{seed}-cume/max-obstime-map-shade.png', 'Sky coverage of longest exposure window (HabEx 4H only)'),
    #Export('h4h', 'path/{seed}-cume/cume-obs-map-shade.png',    'Sky coverage % availability (HabEx 4H only)'),
    # csv's
    Export('*',   'reduce-star-target.csv', 'Target-list dynamic plot data file'),
    Export('*',   'reduce-info.csv', 'Ensemble-info data file'),
    ]


# global verbosity mode, also usable for debugging print's
VERBOSITY = 0

##
## CONSTANT DATA
##
# fixed string: HTML5 header
HTML_OPENER = '''<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <!-- autogenerated file -->
    <title>%s</title>
</head>
<body>
'''
HTML_TRAILER = '''
</body>
</html>
'''

########################################
###
###  Utility Functions
###
########################################

def ensure_permissions(fn):
    r'''Ensure correct permissions on the named data file.  
    We use rw-rw-r-- = 664 (octal), to allow group-write.'''
    try:
        os.chmod(fn, 0664)
    except OSError:
        pass # e.g., don't own the file

def get_valid_filename(s):
    s1 = str(s).strip().replace(' ', '_')
    # strip chars if not "word", - or .
    s2 = re.sub(r'(?u)[^-\w.]', '', s1)
    # truncate
    s3 = s2[:40]
    return s3

########################################
###
###  File output
###
########################################

def rm_old_export(args):
    # remove old png's, csv's
    # we do it this way, rather than removing the directory, because
    # we didn't want to expose ourselves to accidental recursive removes
    # of large subtrees.
    for ext in ('png', 'csv', 'txt', 'html'):
        for f in glob.glob(os.path.join(args.archive, '*.%s' % ext)):
            os.remove(f)

def open_or_die(args, fn):
    outfile = fn
    try:
        out_fp = open(outfile, 'w')
    except:
        sys.stderr.write("%s: Error: Indicated output file `%s' is not writable.\n" % (args.progname, outfile))
        sys.exit(1)
    # print '\tTabulation to %s' % outfile # only if not to stdout, obviously
    return out_fp

def manifest_open(args):
    fp = open_or_die(args, os.path.join(args.archive, 'MANIFEST.txt'))
    fp.write('Experiment: %s\n' % (args.expt_name, ))
    fp.write('Exported by: %s on %s\n' % (args.user, args.timestr, ))
    return fp

def html_open(args):
    fp = open_or_die(args, os.path.join(args.archive, 'index.html'))
    fp.write(HTML_OPENER % (args.expt_name, ))
    fp.write('<h1>%s</h1>\n' % (args.expt_name, ))
    fp.write('<p>Exported by %s on %s\n</p>' % (args.user, args.timestr, ))
    return fp

def html_end(fp):
    fp.write(HTML_TRAILER)

def manifest_item(fp, e, fn):
    fp.write('%s: %s\n' % (fn, e.info))

def html_item(fp, e, fn):
    fp.write('<h2>%s</h2>\n' % (e.info, ))
    fp.write('<p>File: %s</p>\n' % (fn, ))
    if fn.endswith('png'):
        # (link the image)
        fp.write('<A href="%s"><img src="%s" width="100%%"></A>\n' % (fn, fn))

########################################
###
###  Main routines
###
########################################

def set_sim_info(args):
    # get the experiment name from the directory
    try:
        args.expt_name = args.simdir.split('/')[-1]
    except IndexError:
        args.expt_name = 'EXOSIMS Run'
    # allow to over-ride with a single name in a special file
    try:
        ens_fn = os.path.join(args.simdir, 'EnsembleName.txt')
        if os.path.exists(ens_fn):
            args.expt_name = open(ens_fn).readline().strip()
            print('%s: New ensemble name is "%s".' % (args.progname, args.expt_name))
    except:
        pass
    # etc.
    args.timestr = datetime.now().strftime("%m/%d/%Y, %H:%M:%S")
    args.user = os.getenv('USER')

def main(args):
    # clear old outputs
    rm_old_export(args)
    # summary files
    manifest = manifest_open(args)
    html = html_open(args)
    # move exports
    lost = 0
    for e in EXPORTS:
        # these are TBD entries -- skip
        if not e.file: continue
        # needs seed, but don't have it -- skip silently
        if '{seed}' in e.file and not args.seed:
            continue
        # input file based on mode
        infile = os.path.join(args.simdir, e.file.format(seed=args.seed))
        inbase = os.path.basename(infile)
        outfile = args.archive # this is a dir, so will keep file basename
        # consider skipping, depending on export type
        if e.family != '*':
            if args.family and args.family.lower() != e.family.lower():
                print('Skipping %s, wrong family.' % inbase)
        if not os.access(infile, os.R_OK):
            print("Not found: %s" % (infile, ))
            lost += 1
            # sys.exit(1) # stop now
        else:
            shutil.copy(infile, outfile)
            manifest_item(manifest, e, inbase)
            html_item(html, e, inbase)
    # finish summaries
    html_end(html)
    html.close()
    manifest.close()
    #
    if lost > 0:
        print('\nWARNING: Failed to find %d file(s).\n' % (lost, ))
    # create tar archive
    #   -C args.out means to 'cd' to sims/.../export before running the tar command
    tarfile = '%s-export.tgz' % args.subdir
    tarfull = os.path.join(args.out, tarfile)
    subprocess.check_call(['tar', 'czf', tarfull, '-C', args.out, args.subdir])
    ensure_permissions(tarfull)
    print('%s: Archive at: %s' % (args.progname, tarfull))
    subprocess.call(['ls', '-sh', tarfull])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Tabulate CSV file into text or markdown.",
                                     epilog='')
    parser.add_argument('simdir', metavar='SIMDIR',
                            help='simulation directory, typically sims/...')
    parser.add_argument('-o', '--out', metavar='DIR', help='output directory name',
                            default='')
    parser.add_argument('-s', '--seed', metavar='SEED', help='seed to also include',
                            default='')
    parser.add_argument('-f', '--family', metavar='FAMILY', help='mission family, e.g. H4H',
                            default='')
    parser.add_argument('-v', help='verbosity', action='count', dest='verbose',
                            default=0)
    args = parser.parse_args()
    args.quiet = False
    
    # set umask in hopes that files will be group-writable
    os.umask(0002)

    VERBOSITY = args.verbose

    # program name, for convenience
    args.progname = os.path.basename(sys.argv[0])
    
    # ensure simdir exists -- we will create simdir/exports in a second, so check now
    if not os.path.exists(args.simdir):
        sys.stderr.write("%s: Error: sim directory `%s' is not readable.\n" % (args.progname, args.simdir))
        sys.exit(1) # stop now

    # let args be a god object
    set_sim_info(args)
    args.subdir = get_valid_filename(args.expt_name)

    # default output goes to sims/.../export
    if len(args.out) == 0:
        args.out = os.path.join(args.simdir, 'export')
    # ensure enclosing archive dir exists
    args.archive = os.path.join(args.out, args.subdir)
    if not os.path.exists(args.archive):
        os.makedirs(args.archive)
    # announce where things are going
    print("%s: Export to: %s" % (args.progname, args.out))

    main(args)

    print("%s: Done." % (args.progname, ))
    sys.exit(0)
